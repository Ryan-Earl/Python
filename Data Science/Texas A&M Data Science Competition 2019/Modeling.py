#!/usr/bin/env python
# coding: utf-8

# In[1]:


import pandas as pd
import numpy as np
import math 
import sklearn
import keras
import tensorflow
import pylab
import calendar 
import matplotlib
import scipy as sp
from scipy import stats
import statsmodels.api as sm
from pandas import Series
from statsmodels.tsa.arima_model import ARIMA
from math import sqrt
from datetime import datetime 
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from keras.layers import LeakyReLU
from keras.models import Sequential
from keras.layers import Dense
from keras.callbacks import EarlyStopping
from keras.optimizers import Adam
from keras.layers import LSTM
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import RandomizedSearchCV
from xgboost import plot_importance

get_ipython().run_line_magic('matplotlib', 'inline')
import matplotlib.pyplot as plt
import matplotlib.style as style
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")
style.use('seaborn-colorblind')


# In[ ]:


#read data for time, start station, time ridden, count, plan duration, and pass type
hist_performance = pd.read_csv('E:\TAMIDS 2019\Data\historical_start.csv', infer_datetime_format=True, parse_dates=True)
#convert time ridden to operable format from datetime
b = hist_performance['time_ridden'].map(lambda x: pd.to_timedelta(x).seconds)
hist_performance['time_ridden'] = b/60

#encode each type of pass in its own column
walk_up = []
monthly = []
flex = []
annual = []
for row in hist_performance['passholder_type']:
    if row == "Walk-up" or row == 'One Day Pass':
        walk_up.append(1)
    else: 
        walk_up.append(0)
for row in hist_performance['passholder_type']:
    if row == 'Monthly Pass':
        monthly.append(1)
    else: 
        monthly.append(0)
for row in hist_performance['passholder_type']:
    if row == "Flex Pass":
        flex.append(1)
    else: 
        flex.append(0)
for row in hist_performance['passholder_type']:
    if row == 'Annual Pass':
        annual.append(1)
    else:
        annual.append(0) 
hist_performance['Walk_Up'] = walk_up
hist_performance['Monthly'] = monthly
hist_performance['Flex Pass'] = flex
hist_performance['Annual'] = annual

#calculate the income generated by each ride
cost=[]
for index, row in hist_performance.iterrows():
    if row['plan_duration'] == 1 and row['passholder_type'] == "Walk-up":
        cost.append((int(row['time_ridden'] / 30) + (row['time_ridden'] % 30 > 0)) * 1.75)
    elif row['plan_duration'] == 0 and row['passholder_type'] == "Walk-up":
        cost.append((int(row['time_ridden'] / 30) + (row['time_ridden'] % 30 > 0)) * 3.5)
    elif row['plan_duration'] == "One Day Pass":
        if row['time_ridden'] <= 30:
            cost.append(0)
        else:
             cost.append(((int(row['time_ridden'] / 30) + (row['time_ridden'] % 30 > 0))-1) * 1.75)
    elif row['plan_duration'] == "Monthly Pass":
        if row['time_ridden'] <= 30:
            cost.append(0)
        else:
             cost.append(((int(row['time_ridden'] / 30) + (row['time_ridden'] % 30 > 0))-1) * 1.75)
    elif row['plan_duration'] == "Flex Pass":
        cost.append((int(row['time_ridden'] / 30) + (row['time_ridden'] % 30 > 0)) * 1.75)
    else:
        if row['time_ridden'] <= 30:
            cost.append(0)
        else:
             cost.append(((int(row['time_ridden'] / 30) + (row['time_ridden'] % 30 > 0))-1) * 1.75)
hist_performance['cost'] = cost

#drop plan duration and pass type 
hist_performance = hist_performance.drop(hist_performance.columns[[4,5]], axis=1)
hist_performance = hist_performance[np.isfinite(hist_performance['count'])]
#read dataframes for stations and their corresponding area
station_areas = pd.read_csv('E:\TAMIDS 2019\Data\stations.csv')
#read dataframes for stations and their corresponding latlon
latlon = pd.read_csv('E:\TAMIDS 2019\Data\station_location.csv')
latlon = latlon.groupby('start_station')['station_lat', 'station_lon'].first()
#merge count data to area data
station = pd.merge(hist_performance, station_areas, on='start_station', how='left')
#merge the result with latlon
station = pd.merge(station, latlon, on='start_station', how='left')
#group by time
hist_performance = dtla.groupby(['joinkey'])["time_ridden", "count", 'cost'].sum()


# In[ ]:


#Import Data and remove outliers
model = pd.read_csv(r"E:\TAMIDS 2019\Data\pred.csv", low_memory=False, parse_dates=["Time"])
model = model[np.abs(model["Count"]-model["Count"].mean())<=(model["Count"].std()*3)]
#remove unneeded columns
df = model.drop(model.columns[[9,10,11,12,14]], axis=1)
#One hot encode categorical variables
df = pd.get_dummies(data=df, columns=['Day_Name', 'month', 'season', 'weather_main'])
#Cylically encode hour variable
df['hour_sin'] = np.sin(2 * np.pi * df['hour'] / 23.0)
df['hour_cos'] = np.cos(2 * np.pi * df['hour'] / 23.0)
#visualize cyclical encoding
ax = df.plot.scatter('hour_sin', 'hour_cos').set_aspect('equal')
#drop hour variable
df = df.drop(df.columns[[1]], axis=1)
#export to be cleaned and normalized in excel
df.to_csv(r'E:\TAMIDS 2019\Data\tosplit.csv')


# In[2]:


#import train test split
train_reg = pd.read_csv(r"E:\TAMIDS 2019\Data\general_train1_regression.csv", infer_datetime_format=True, parse_dates=['Time'])
test_reg = pd.read_csv(r"E:\TAMIDS 2019\Data\general_test1_regression.csv", infer_datetime_format=True, parse_dates=['Time'])
x_train_reg = train_reg.drop('Count', axis=1)
y_train_reg = train_reg[['Time', 'Count']]
x_test_reg = test_reg.drop('Count', axis=1)
y_test_reg = test_reg[['Time', 'Count']]


# In[3]:


#set index as Time and drop column
x_train_reg = x_train_reg.set_index(['Time'], drop=True)
y_train_reg = y_train_reg.set_index(['Time'], drop=True)
x_test_reg = x_test_reg.set_index(['Time'], drop=True)
y_test_reg = y_test_reg.set_index(['Time'], drop=True)

#scale data
scaler = MinMaxScaler(feature_range=(0,1))
x_train_reg[['temperature', 'humidity']] = scaler.fit_transform(x_train_reg[['temperature', 'humidity']])
x_test_reg[['temperature', 'humidity']] = scaler.fit_transform(x_test_reg[['temperature', 'humidity']])


# In[ ]:


##Random Forest Regression##
##Tuning Hyperparameters##

# Number of trees in random forest
n_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]
# Number of features to consider at every split
max_features = ['auto', 'sqrt']
# Maximum number of levels in tree
max_depth = [int(x) for x in np.linspace(10, 110, num = 11)]
max_depth.append(None)
# Minimum number of samples required to split a node
min_samples_split = [2, 5, 10]
# Minimum number of samples required at each leaf node
min_samples_leaf = [1, 2, 4]
# Method of selecting samples for training each tree
bootstrap = [True, False]
# Create the random grid
random_grid = {'n_estimators': n_estimators,
               'max_features': max_features,
               'max_depth': max_depth,
               'min_samples_split': min_samples_split,
               'min_samples_leaf': min_samples_leaf,
               'bootstrap': bootstrap}
#create base model
rf1 = RandomForestRegressor()
rf_random = RandomizedSearchCV(estimator = rf1, param_distributions = random_grid, n_iter = 10, cv = 3, verbose=2, random_state=1234, n_jobs = -1)
# Fit the random search model
rf_random.fit(x_train_reg, y_train_reg)


# In[4]:


rf = RandomForestRegressor(n_estimators=800, random_state=1234)
rf.fit(x_train_reg, y_train_reg)

rf_test_pred = rf.predict(x_test_reg)
print(rf.score(x_train_reg, y_train_reg))
print(rf.score(x_test_reg, y_test_reg))


# In[5]:


print(sqrt(mean_squared_error(y_test_reg, rf_test_pred)))


# In[6]:


import xgboost as xgb

xgb_model = xgb.XGBRegressor(colsample_bytree=.4,
                            gamma=0,
                            learning_rate=.07,
                            max_depth=3,
                            min_child_weight=1.5,
                            n_estimators=10000,
                            reg_alpha=.75,
                            reg_lambda=.45,
                            subsample=.6,
                            seed=1234)
xgb_model.fit(x_train_reg, y_train_reg)
xgb_test_pred = xgb_model.predict(x_test_reg)


# In[7]:


print(sqrt(mean_squared_error(y_test_reg, xgb_test_pred)))


# In[8]:


print(xgb_model.feature_importances_)


# In[9]:


ax = plot_importance(xgb_model)
fig = ax.figure
fig.set_size_inches(20,10)


# In[10]:


nn_model = Sequential()
nn_model.add(Dense(12, input_dim=39, activation='relu'))
nn_model.add(Dense(1))
nn_model.compile(loss='mean_squared_error', optimizer='adam')
early_stop = EarlyStopping(monitor='loss', patience=2, verbose=1)
history = nn_model.fit(x_train_reg, y_train_reg, epochs=100, batch_size=1, verbose=1, callbacks=[early_stop], shuffle=False)


# In[11]:


y_pred_test_nn = nn_model.predict(x_test_reg)
print(sqrt(mean_squared_error(y_test_reg, y_pred_test_nn)))


# In[12]:


dnn_model = Sequential()
dnn_model.add(Dense(50, input_dim=39, activation='relu'))
dnn_model.add(Dense(25, input_dim=39, activation='relu'))
dnn_model.add(Dense(10, input_dim=39, activation='relu'))
dnn_model.add(Dense(1))
dnn_model.compile(loss='mean_squared_error', optimizer='adam')
early_stop = EarlyStopping(monitor='loss', patience=2, verbose=1)
history = dnn_model.fit(x_train_reg, y_train_reg, epochs=100, batch_size=1, verbose=1, callbacks=[early_stop], shuffle=False)


# In[13]:


y_pred_test_dnn = dnn_model.predict(x_test_reg)
print(sqrt(mean_squared_error(y_test_reg, y_pred_test_dnn)))


# In[ ]:





# In[14]:


nn1_model = Sequential()
nn1_model.add(Dense(7, input_dim=39, activation='relu'))
nn1_model.add(Dense(1))
nn1_model.compile(loss='mean_squared_error', optimizer='adam')
early_stop = EarlyStopping(monitor='loss', patience=2, verbose=1)
history_rnn = nn1_model.fit(x_train_reg, y_train_reg, epochs=100, batch_size=1, verbose=1, callbacks=[early_stop], shuffle=False)


# In[15]:


y_pred_test_nn1 = (nn1_model.predict(x_test_reg))
print(sqrt(mean_squared_error(y_test_reg, y_pred_test_nn1)))


# In[16]:


nn2_model = Sequential()
nn2_model.add(Dense(20, input_dim=39, activation='relu'))
nn2_model.add(Dense(1))
nn2_model.compile(loss='mean_squared_error', optimizer='adam')
early_stop = EarlyStopping(monitor='loss', patience=2, verbose=1)
history = nn2_model.fit(x_train_reg, y_train_reg, epochs=100, batch_size=1, verbose=1, callbacks=[early_stop], shuffle=False)


# In[17]:


y_pred_test_nn2 = nn2_model.predict(x_test_reg)
print(sqrt(mean_squared_error(y_test_reg, y_pred_test_nn1)))


# In[28]:


style.use("seaborn-colorblind")
plt.plot(history.history['loss'])
plt.plot(history_rnn.history['loss'])
plt.title('RNN Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Stacked LSTM', 'Deep Neural Network'], loc='best')
plt.show()


# In[ ]:





# In[ ]:





# In[19]:


from sklearn.tree import DecisionTreeRegressor

tree = DecisionTreeRegressor()
tree.fit(x_train_reg, y_train_reg)

tree_pred = tree.predict(x_test_reg)
print(sqrt(mean_squared_error(y_test_reg, tree_pred)))


# In[20]:


##Linear Model##
from sklearn import linear_model

ln = linear_model.Lasso(alpha = .00001)
ln.fit(x_train_reg, y_train_reg)

ln_pred = ln.predict(x_test_reg)
print(sqrt(mean_squared_error(y_test_reg, ln_pred)))


# In[21]:


##Linear Model Baseline##
from sklearn import linear_model

ln = linear_model.LinearRegression()
ln.fit(x_train_reg, y_train_reg)

ln_pred = ln.predict(x_test_reg)
print(sqrt(mean_squared_error(y_test_reg, ln_pred)))


# In[ ]:


#tuned xgboost model
import xgboost as xgb
dtrain = xgb.DMatrix(x_train_reg, label=y_train_reg)
dtest = xgb.DMatrix(x_test_reg, label=y_test_reg)


# In[ ]:


params = {
    "max_depth":6,
    "min_child_weight":1,
    'eta':.3,
    'subsample':1,
    'colsample_bytree':1,
    'objective':'reg:linear',
}

params['eval_metric']='rmse'
num_boost_round=999

model = xgb.train(
    params,
    dtrain,
    num_boost_round=num_boost_round,
    evals=[(dtest, 'Test')],
    early_stopping_rounds=10
)

print("Best RMSE: {:.2f} with {} rounds".format(
        model.best_score,
        model.best_iteration+1))


# In[ ]:


cv_results = xgb.cv(
    params,
    dtrain,
    num_boost_round=num_boost_round,
    seed=42,
    nfold=5,
    metrics={'rmse'},
    early_stopping_rounds=10
)

cv_results


# In[ ]:


cv_results['test-rmse-mean'].min()


# In[ ]:


gridsearch_params = [
    (max_depth, min_child_weight)
    for max_depth in range (9,12)
    for min_child_weight in range (5,8)
]

min_rmse = float("Inf")
best_params = None
for max_depth, min_child_weight in gridsearch_params:
    print ('CV with max_depth={}, min_child_weight={}'.format(
                max_depth,
                min_child_weight))
    params['max_depth']=max_depth
    params['min_child_weight']=min_child_weight
    
    cv_results=xgb.cv(
        params,
        dtrain,
        num_boost_round=num_boost_round,
        seed=42,
        nfold=5,
        metrics={'rmse'},
        early_stopping_rounds=10
    )
    
    mean_rmse = cv_results['test-rmse-mean'].min()
    boost_rounds = cv_results['test-rmse-mean'].argmin()
    print('\tRMSE {} for {} rounds'.format(mean_rmse, boost_rounds))
    if mean_rmse < min_rmse:
        min_rmse = mean_rmse
        best_params = (max_depth, min_child_weight)

print("Best params: {}, {}, RMSE: {}".format(best_params[0],
best_params[1], min_rmse))


# In[ ]:


params['max_depth']=10
params['min_child_weight']=5


# In[ ]:


gridsearch_params = [
    (subsample, colsample)
    for subsample in [i/10. for i in range(7,11)]
    for colsample in [i/10. for i in range(7,11)]
]

min_rmse = float("Inf")
best_params = None

for subsample, colsample in reversed(gridsearch_params):
    print("CV with subsample={}, colsample={}".format(
        subsample,
        colsample))
    params['subsample'] = subsample
    params['colsample_bytree'] = colsample
    
    cv_results = xgb.cv(
        params,
        dtrain,
        num_boost_round=num_boost_round,
        seed=42,
        nfold=5,
        metrics={'rmse'},
        early_stopping_rounds=10
    )
    
    mean_rmse = cv_results['test-rmse-mean'].min()
    boost_rounds = cv_results['test-rmse-mean'].argmin()
    print('\tRMSE {} for {} rounds'.format(mean_rmse, boost_rounds))
    if mean_rmse < min_rmse:
        min_rmse = mean_rmse
        best_params = (subsample,colsample)
        
print("Best params: {}, {}, RMSE: {}".format(best_params[0],
                                            best_params[1], min_rmse))


# In[ ]:


params['subsample'] = 1.
params['colsample_bytree'] = 1.


# In[ ]:


min_rmse = float('Inf')
best_params = None

for eta in [.3, .2, .1, .05, .01, .005]:
    print('CV with eta={}'.format(eta))
    
    params['eta'] = eta
    
    get_ipython().run_line_magic('time', "cv_results = xgb.cv(params, dtrain, num_boost_round=num_boost_round, seed=42, nfold=5, metrics=['rmse'], early_stopping_rounds=10)")
   
    mean_rmse = cv_results['test-rmse-mean'].min()
    boost_rounds = cv_results['test-rmse-mean'].argmin()
    print('\tRMSE {} for {} rounds\n'.format(mean_rmse, boost_rounds))
    if mean_rmse < min_rmse:
        min_rmse = mean_rmse
        best_params = eta

print("Best params: {}, RMSE: {}".format(best_params, min_rmse))


# In[ ]:


params['eta'] = 0.1


# In[ ]:


model = xgb.train(
    params,
    dtrain,
    num_boost_round=num_boost_round,
    evals=[(dtest, "Test")],
    early_stopping_rounds=10
)

print("Best RMSE: {:.2f} in {} rounds".format(model.best_score, model.best_iteration+1))


# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:




