#!/usr/bin/env python
# coding: utf-8

# In[1]:


import pandas as pd
import numpy as np
import math 
import sklearn
import keras
import tensorflow
import pylab
import calendar 
import matplotlib
import scipy as sp
from scipy import stats
import statsmodels.api as sm
from pandas import Series
from statsmodels.tsa.arima_model import ARIMA
from math import sqrt
from datetime import datetime 
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from keras.layers import LeakyReLU
from keras.models import Sequential
from keras.layers import Dense
from keras.callbacks import EarlyStopping
from keras.optimizers import Adam
from keras.layers import LSTM
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import RandomizedSearchCV

get_ipython().run_line_magic('matplotlib', 'inline')
import matplotlib.pyplot as plt
import matplotlib.style as style
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")
style.use('seaborn-colorblind')


# In[ ]:


#read data for time, start station, time ridden, count, plan duration, and pass type
hist_performance = pd.read_csv('E:\TAMIDS 2019\Data\historical_start.csv', infer_datetime_format=True, parse_dates=True)
#convert time ridden to operable format from datetime
b = hist_performance['time_ridden'].map(lambda x: pd.to_timedelta(x).seconds)
hist_performance['time_ridden'] = b/60

#encode each type of pass in its own column
walk_up = []
monthly = []
flex = []
annual = []
for row in hist_performance['passholder_type']:
    if row == "Walk-up" or row == 'One Day Pass':
        walk_up.append(1)
    else: 
        walk_up.append(0)
for row in hist_performance['passholder_type']:
    if row == 'Monthly Pass':
        monthly.append(1)
    else: 
        monthly.append(0)
for row in hist_performance['passholder_type']:
    if row == "Flex Pass":
        flex.append(1)
    else: 
        flex.append(0)
for row in hist_performance['passholder_type']:
    if row == 'Annual Pass':
        annual.append(1)
    else:
        annual.append(0) 
hist_performance['Walk_Up'] = walk_up
hist_performance['Monthly'] = monthly
hist_performance['Flex Pass'] = flex
hist_performance['Annual'] = annual

#calculate the income generated by each ride
cost=[]
for index, row in hist_performance.iterrows():
    if row['plan_duration'] == 1 and row['passholder_type'] == "Walk-up":
        cost.append((int(row['time_ridden'] / 30) + (row['time_ridden'] % 30 > 0)) * 1.75)
    elif row['plan_duration'] == 0 and row['passholder_type'] == "Walk-up":
        cost.append((int(row['time_ridden'] / 30) + (row['time_ridden'] % 30 > 0)) * 3.5)
    elif row['plan_duration'] == "One Day Pass":
        if row['time_ridden'] <= 30:
            cost.append(0)
        else:
             cost.append(((int(row['time_ridden'] / 30) + (row['time_ridden'] % 30 > 0))-1) * 1.75)
    elif row['plan_duration'] == "Monthly Pass":
        if row['time_ridden'] <= 30:
            cost.append(0)
        else:
             cost.append(((int(row['time_ridden'] / 30) + (row['time_ridden'] % 30 > 0))-1) * 1.75)
    elif row['plan_duration'] == "Flex Pass":
        cost.append((int(row['time_ridden'] / 30) + (row['time_ridden'] % 30 > 0)) * 1.75)
    else:
        if row['time_ridden'] <= 30:
            cost.append(0)
        else:
             cost.append(((int(row['time_ridden'] / 30) + (row['time_ridden'] % 30 > 0))-1) * 1.75)
hist_performance['cost'] = cost

#drop plan duration and pass type 
hist_performance = hist_performance.drop(hist_performance.columns[[4,5]], axis=1)
#read dataframes for stations and their corresponding area
station_areas = pd.read_csv('E:\TAMIDS 2019\Data\stations.csv')
#read dataframes for stations and their corresponding latlon
latlon = pd.read_csv('E:\TAMIDS 2019\Data\station_location.csv')
latlon = latlon.groupby('start_station')['station_lat', 'station_lon'].first()
#merge count data to area data
station = pd.merge(hist_performance, station_areas, on='start_station', how='left')
#merge the result with latlon
station = pd.merge(station, latlon, on='start_station', how='left')


# In[ ]:


#seperate data by region
dtla = station.where(station['Region'] == 'DTLA')
dtla = dtla[np.isfinite(dtla['count'])]
venice = station.where(station['Region'] == 'Venice')
venice = venice[np.isfinite(venice['count'])]
pla = station.where(station['Region'] == 'Port of LA')
pla = pla[np.isfinite(pla['count'])]
pasadena = station.where(station['Region'] == 'Pasadena')
pasadena = pasadena[np.isfinite(pasadena['count'])]


# In[ ]:


#group by time
dtla_count = dtla.groupby(['joinkey'])["count"].sum()
venice_count = venice.groupby(['joinkey'])["count"].sum()
pla_count = pla.groupby(['joinkey'])["count"].sum()
pasadena_count = pasadena.groupby(['joinkey'])["count"].sum()
#export to clean in excel
dtla_count.to_csv(r'E:\TAMIDS 2019\Data\dtla_count.csv')
venice_count.to_csv(r'E:\TAMIDS 2019\Data\venice_count.csv')
pla_count.to_csv(r'E:\TAMIDS 2019\Data\pla_count.csv')
pasadena_count.to_csv(r'E:\TAMIDS 2019\Data\pasadena_count.csv')


# In[ ]:


#import clean csv
pas_count = pd.read_csv('E:\TAMIDS 2019\Data\pasadena_correct.csv', infer_datetime_format=True, parse_dates=True)
pas_count = pas_count[np.abs(pas_count['ride_count']-pas_count['ride_count'].mean())<=(pas_count['ride_count'].std()*3)]
pas_count['time'] =  pd.to_datetime(pas_count['time'])
pas_count = pas_count.groupby([pd.Grouper(key='time', freq='D')]).sum()
pas_count[pas_count == 0] = np.nan
pas_count = pas_count.dropna()


# In[ ]:


#import clean csv
dtla_count = pd.read_csv('E:\TAMIDS 2019\Data\dtla_correct.csv', infer_datetime_format=True, parse_dates=True)
dtla_count = dtla_count[np.abs(dtla_count['ride_count']-dtla_count['ride_count'].mean())<=(dtla_count['ride_count'].std()*3)]
dtla_count['time'] =  pd.to_datetime(dtla_count['time'])
dtla_count = dtla_count.groupby([pd.Grouper(key='time', freq='D')]).sum()
dtla_count[dtla_count == 0] = np.nan
dtla_count = dtla_count.dropna()
dtla_count.to_csv(r'E:\TAMIDS 2019\Data\dtla.csv')


# In[ ]:


dtla_count = pd.read_csv('E:\TAMIDS 2019\Data\dtla1.csv', infer_datetime_format=True, parse_dates=['time'])


# In[ ]:


#Series plot with no month before July 2016
ax = dtla_count.plot(x='time', y='ride_count', figsize = (12,8))
ax.set_title('Ride Count Over Time in DTLA')
ax.set_ylabel('Count')
ax.set_xlabel('Time')


# In[2]:


train = pd.read_csv('E:\TAMIDS 2019\Data\wtfff.csv', infer_datetime_format=True, parse_dates=['time'])
test = pd.read_csv('E:\TAMIDS 2019\Data\wtff.csv', infer_datetime_format=True, parse_dates=['time'])


# In[3]:


plt.figure(figsize=(12,8))
plt.plot(train['time'], train['ride_count'], label='Train')
plt.plot(test['time'], test['ride_count'], label='Test')
plt.legend(loc='best')
plt.xlabel("Date")
plt.ylabel("Ride Count")
plt.title("Train and Test Split")
plt.show


# In[4]:


#set index as Time and drop column
train = train.set_index(['time'], drop=True)
test = test.set_index(['time'], drop=True)

#normalize train and test data between 0 and 1
scaler = MinMaxScaler(feature_range=(0,1))
train_dtla = scaler.fit_transform(train)
test_dtla = scaler.fit_transform(test)
train_sc_df = pd.DataFrame(train_dtla, columns=['Y'], index=train.index)
test_sc_df = pd.DataFrame(test_dtla, columns=['Y'], index=test.index)


for i in range(1,2):
    train_sc_df['X_{}'.format(i)] = train_sc_df['Y'].shift(i)
    test_sc_df['X_{}'.format(i)] = test_sc_df['Y'].shift(i)

X_train = train_sc_df.dropna().drop('Y', axis=1)
y_train = train_sc_df.dropna().drop('X_1', axis=1)
X_train = X_train.as_matrix()
y_train = y_train.as_matrix()

X_test = test_sc_df.dropna().drop('Y', axis=1)
y_test = test_sc_df.dropna().drop('X_1', axis=1)
X_test = X_test.as_matrix()
y_test = y_test.as_matrix()

X_train_lstm = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test_lstm = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

print('Train shape: ', X_train_lstm.shape)
print('Test shape: ', X_test_lstm.shape)


# In[5]:


nn_model = Sequential()
nn_model.add(Dense(12, input_dim=1, activation='relu'))
nn_model.add(Dense(1))
nn_model.compile(loss='mean_squared_error', optimizer='adam')
early_stop = EarlyStopping(monitor='loss', patience=2, verbose=1)
history = nn_model.fit(X_train, y_train, epochs=100, batch_size=1, verbose=1, callbacks=[early_stop], shuffle=False)


# In[6]:


y_pred_test_nn = scaler.inverse_transform(nn_model.predict(X_test))
y_train_pred_nn = scaler.inverse_transform(nn_model.predict(X_train))
orig_train = scaler.inverse_transform(y_train)
orig_test = scaler.inverse_transform(y_test)
print(sqrt(mean_squared_error(orig_train, y_train_pred_nn)))
print(sqrt(mean_squared_error(orig_test, y_pred_test_nn)))


# In[7]:


lstm_model = Sequential()
lstm_model.add(LSTM(12, input_shape=(1, X_train_lstm.shape[1]), activation='relu', kernel_initializer='lecun_uniform', return_sequences=False))
lstm_model.add(Dense(1))
lstm_model.compile(loss='mean_squared_error', optimizer='adam')
early_stop = EarlyStopping(monitor='loss', patience=2, verbose=1)
history_lstm = lstm_model.fit(X_train_lstm, y_train, epochs=100, batch_size=1, verbose=1, shuffle=False, callbacks=[early_stop])


# In[8]:


y_pred_test_lstm = scaler.inverse_transform(lstm_model.predict(X_test_lstm))
y_train_pred_lstm = scaler.inverse_transform(lstm_model.predict(X_train_lstm))
print(sqrt(mean_squared_error(orig_train, y_train_pred_lstm)))
print(sqrt(mean_squared_error(orig_test, y_pred_test_lstm)))


# In[18]:


plt.figure(figsize=(10, 6))
plt.plot()
plt.plot(orig_test, label='True Count')
plt.plot(y_pred_test_nn, label='DNN')
plt.plot(y_pred_test_lstm, label='Stacked LSTM')
plt.title("Model Forecast Quarter 4")
plt.xlabel('Observations')
plt.ylabel('Ride Count')
plt.legend()
plt.show();


# In[ ]:


##PASADENA FORECAST##


# In[ ]:


#import clean csv
pas_count = pd.read_csv('E:\TAMIDS 2019\Data\pasadena_correct.csv', infer_datetime_format=True, parse_dates=True)
pas_count = pas_count[np.abs(pas_count['ride_count']-pas_count['ride_count'].mean())<=(pas_count['ride_count'].std()*3)]
pas_count['time'] =  pd.to_datetime(pas_count['time'])
pas_count = pas_count.groupby([pd.Grouper(key='time', freq='D')]).sum()
pas_count[pas_count == 0] = np.nan
pas_count = pas_count.dropna()


# In[ ]:


#Regression


# In[ ]:


#Import Data and remove outliers
model = pd.read_csv(r"E:\TAMIDS 2019\Data\pred.csv", low_memory=False, parse_dates=["Time"])
model = model[np.abs(model["Count"]-model["Count"].mean())<=(model["Count"].std()*3)]
#remove unneeded columns
df = model.drop(model.columns[[9,10,11,12,14]], axis=1)
#One hot encode categorical variables
df = pd.get_dummies(data=df, columns=['Day_Name', 'month', 'season', 'weather_main'])
#Cylically encode hour variable
df['hour_sin'] = np.sin(2 * np.pi * df['hour'] / 23.0)
df['hour_cos'] = np.cos(2 * np.pi * df['hour'] / 23.0)
#visualize cyclical encoding
ax = df.plot.scatter('hour_sin', 'hour_cos').set_aspect('equal')
#drop hour variable
df = df.drop(df.columns[[1]], axis=1)
#export to be cleaned and normalized in excel
df.to_csv(r'E:\TAMIDS 2019\Data\tosplit.csv')


# In[10]:


train_reg = pd.read_csv(r"E:\TAMIDS 2019\Data\general_train1_regression.csv", infer_datetime_format=True, parse_dates=['Time'])
test_reg = pd.read_csv(r"E:\TAMIDS 2019\Data\general_test1_regression.csv", infer_datetime_format=True, parse_dates=['Time'])
x_train_reg = train_reg.drop('Count', axis=1)
y_train_reg = train_reg[['Time', 'Count']]
x_test_reg = test_reg.drop('Count', axis=1)
y_test_reg = test_reg[['Time', 'Count']]


# In[11]:


#set index as Time and drop column
x_train_reg = x_train_reg.set_index(['Time'], drop=True)
y_train_reg = y_train_reg.set_index(['Time'], drop=True)
x_test_reg = x_test_reg.set_index(['Time'], drop=True)
y_test_reg = y_test_reg.set_index(['Time'], drop=True)


# In[ ]:


##Random Forest Regression##
##Tuning Hyperparameters##

# Number of trees in random forest
n_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]
# Number of features to consider at every split
max_features = ['auto', 'sqrt']
# Maximum number of levels in tree
max_depth = [int(x) for x in np.linspace(10, 110, num = 11)]
max_depth.append(None)
# Minimum number of samples required to split a node
min_samples_split = [2, 5, 10]
# Minimum number of samples required at each leaf node
min_samples_leaf = [1, 2, 4]
# Method of selecting samples for training each tree
bootstrap = [True, False]
# Create the random grid
random_grid = {'n_estimators': n_estimators,
               'max_features': max_features,
               'max_depth': max_depth,
               'min_samples_split': min_samples_split,
               'min_samples_leaf': min_samples_leaf,
               'bootstrap': bootstrap}
#create base model
rf1 = RandomForestRegressor()
rf_random = RandomizedSearchCV(estimator = rf1, param_distributions = random_grid, n_iter = 10, cv = 3, verbose=2, random_state=1234, n_jobs = -1)
# Fit the random search model
rf_random.fit(x_train_reg, y_train_reg)


# In[12]:


rf = RandomForestRegressor(n_estimators=800, random_state=1234)
rf.fit(x_train_reg, y_train_reg)

rf_test_pred = rf.predict(x_test_reg)
rf.score(x_train_reg, y_train_reg)
rf.score(x_test_reg, y_test_reg)


# In[13]:


print(sqrt(mean_squared_error(y_test_reg, rf_test_pred)))


# In[14]:


import xgboost as xgb

xgb_model = xgb.XGBRegressor(colsample_bytree=.4,
                            gamma=0,
                            learning_rate=.07,
                            max_depth=3,
                            min_child_weight=1.5,
                            n_estimators=10000,
                            reg_alpha=.75,
                            reg_lambda=.45,
                            subsample=.6,
                            seed=1234)
xgb_model.fit(x_train_reg, y_train_reg)


# In[15]:


xgb_test_pred = xgb_model.predict(x_test_reg)


# In[16]:


print(sqrt(mean_squared_error(y_test_reg, xgb_test_pred)))

